version: 2.1

orbs:
  docker: circleci/docker@2.1.2
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3

jobs:
  install-and-check-lint:
    docker:
      - image: python:3.7.3-stretch
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "app/requirements.txt" }}
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            cd app 
            python3 -m venv .devops
            source .devops/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
                chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./.devops
          key: v1-dependencies-{{ checksum "app/requirements.txt" }}
      - run:
          name: Run lint
          command: |
            cd app
            source .devops/bin/activate
            make lint

  build-and-push-docker-image:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Build and push docker image
          command: |
            cd app
            export IMAGE_VER=$(<version.txt)
            # Build docker image
            docker build -t capstone-app .
            
            # Tag docker image
            docker tag capstone-app ${DOCKER_HUB_ID}/${DOCKER_REPO}:${IMAGE_VER}
            docker tag capstone-app ${DOCKER_HUB_ID}/${DOCKER_REPO}:lastest
            
            # Login into docker-hub
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASS
            
            # We publish two images with different version tags: 
            # - numbered version
            # - "latest"
            docker push niceday2256/capstone-app:${IMAGE_VER}
            docker push niceday2256/capstone-app:lastest

  deploy-infrastructure:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "app/requirements.txt" }}
            - v1-dependencies-
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible tar curl
            curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.18.8/2020-09-18/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
            eksctl version
      - run:
          name: deploy cluster
          command: |
            eksctl create cluster --name capstone-proj --region us-east-1 --nodegroup-name capstone-proj --nodes 1 --ssh-access --ssh-public-key udacity --managed       

  deploy-config: 
    docker:
      - image: 'cimg/base:stable'
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "app/requirements.txt" }}
            - v1-dependencies-
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: false
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update && sudo apt-get install -y
            sudo apt-get install -y curl unzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: set-credential
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set aws_session_token $AWS_SESSION_TOKEN
            aws configure set region $AWS_DEFAULT_REGION
      - kubernetes/install-kubectl
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: capstone-proj
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: "kubernates/capstone-frontend-deployment.yml"
          resource-name: deployment/capstone-frontend
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: "kubernates/capstone-frontend-service.yml"
          resource-name: deployment/capstone-frontend
      - kubernetes/update-container-image:
          get-rollout-status: true
          container-image-updates: "capstone-frontend=niceday2256/capstone-proj:latest"
          resource-name: deployment/capstone-frontend
workflows:
  default:
    jobs:
      - install-and-check-lint
      - build-and-push-docker-image:
          requires: [install-and-check-lint]
          filters:
            branches:
              only: [main]
      - deploy-infrastructure:
          requires: [build-and-push-docker-image]
      - deploy-config:
          requires: [deploy-infrastructure]